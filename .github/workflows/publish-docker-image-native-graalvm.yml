#  push docker image to GitHub and DockerHub using Dockerfile with native graalvm mode
name: Publish a Docker image to GitHub and DockerHub

on:
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build:
    name: Publish a Docker image to GitHub and DockerHub
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set up GraalVM JDK 24
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm'

      - name: Check Java Version and Check Tag
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"
          echo "The repository name is: ${{ github.event.repository.name }}"
          echo "Dockerhub username is: ${{ vars.DOCKER_USERNAME }}"
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          java --version
          native-image --version

      - name: Create Native Container Image with GraalVM and Maven
        run: chmod +x mvnw && ./mvnw clean -Pnative spring-boot:build-image -DskipTests --file pom.xml --batch-mode --update-snapshots

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # tag above spring boot created image with release/tag and latest tag and push both tags to dockerhub
      - name: Push to DockerHub
        run: |
          docker tag ${{ env.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest ${{ env.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{  github.ref_name }}
          docker push --all-tags ${{ env.DOCKER_USERNAME }}/${{ github.event.repository.name }}

      # tag above both images to GitHub registry with release and latest and push both tags to GitHub
      - name: Push to GitHub
        run: |
          docker tag ${{ env.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest ${{ env.REGISTRY }}/${{ github.repository }}:latest
          docker tag ${{ env.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{  github.ref_name }} ${{ env.REGISTRY }}/${{ github.repository }}:${{  github.ref_name }}
          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}